plugins {
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id "com.github.node-gradle.node" version "2.2.3"
    id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compile group: 'org.springframework', name: 'spring-jdbc', version: '5.2.9.RELEASE'
    //runtimeOnly 'com.h2database:h2'
    compile group: 'org.codehaus.jackson', name: 'jackson-core-asl', version: '1.9.13'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.12.0-rc1'

    runtimeOnly 'org.postgresql:postgresql'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

}

test {
    useJUnitPlatform()
}

node {
    download = true

    workDir = file("${project.buildDir}/nodejs")

    npmWorkDir = file("${project.buildDir}/npm")
}

task appNpmInstall(type: NpmTask) {
    inputs.files(fileTree('src/main/webapp/node_modules'))
    inputs.files(fileTree('src/main/webapp/src'))
    inputs.file('src/main/webapp/package.json')
    
    outputs.dir('build/resources/main/static')

    description = "Installs all dependencies from package.json"
    workingDir = file("${project.projectDir}/src/main/webapp")
    args = ["install"]
}

task appNpmBuild(type: NpmTask) {
    inputs.files(fileTree('src/main/webapp/node_modules'))
    inputs.files(fileTree('src/main/webapp/src'))
    inputs.file('src/main/webapp/package.json')
    outputs.dir('build/resources/main/static')
    description = "Builds production of the webapp"
    workingDir = file("${project.projectDir}/src/main/webapp")
    args = ["run", "build"]
}

task copyWebApp(type: Copy) {
    from 'src/main/webapp/build'
    into 'build/resources/main/static/.'
}

appNpmBuild.dependsOn appNpmInstall
copyWebApp.dependsOn appNpmBuild
compileJava.dependsOn copyWebApp